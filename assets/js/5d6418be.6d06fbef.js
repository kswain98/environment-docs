"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[154],{6816:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>a});var i=t(4848),r=t(8453);const s={sidebar_position:1},o="Environments",c={id:"tutorial-basics/environments",title:"Environments",description:"Initialize procedurally generated indoor and outdoor environments to create your own unique virtual environment that can be explored and interacted with:",source:"@site/docs/tutorial-basics/environments.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/environments",permalink:"/environment-docs/docs/tutorial-basics/environments",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/environments.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Basics",permalink:"/environment-docs/docs/category/tutorial---basics"},next:{title:"Agents",permalink:"/environment-docs/docs/tutorial-basics/agents"}},d={},a=[{value:"Create your first Environment",id:"create-your-first-environment",level:2},{value:"Render the Environment",id:"render-the-environment",level:2},{value:"Observe the Environment as a JSON Graph",id:"observe-the-environment-as-a-json-graph",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"environments",children:"Environments"})}),"\n",(0,i.jsxs)(n.p,{children:["Initialize ",(0,i.jsx)(n.strong,{children:"procedurally generated indoor and outdoor environments"})," to create your own unique virtual environment that can be explored and interacted with:"]}),"\n",(0,i.jsx)(n.h2,{id:"create-your-first-environment",children:"Create your first Environment"}),"\n",(0,i.jsxs)(n.p,{children:["To create a interactable environmemnt, you will need to run the ",(0,i.jsx)(n.code,{children:"make"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import virtualcity\n\nenvironment.make(\n    environment="apartment",\n    num_env=[1],\n    seed=[-1]\n)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"environment"})," \u2192 the type of environment that will be generated ",(0,i.jsx)(n.code,{children:"city"}),", ",(0,i.jsx)(n.code,{children:"apartment"}),", ",(0,i.jsx)(n.code,{children:"convenience store"}),", ",(0,i.jsx)(n.code,{children:"office"}),", ",(0,i.jsx)(n.code,{children:"bank"}),", ",(0,i.jsx)(n.code,{children:"subway station"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"num_env"})," \u2192 number of environments for parallelism ",(0,i.jsx)(n.code,{children:"[int]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"seed"})," \u2192 seed value used for replicating the procedeurally generated environment ",(0,i.jsx)(n.code,{children:"[int]"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"render-the-environment",children:"Render the Environment"}),"\n",(0,i.jsxs)(n.p,{children:["To render the environment that you just created, you will need to run the ",(0,i.jsx)(n.code,{children:"render"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import virtualcity\n\nenvironment.render(\n    camera_index=[-1],\n    image_synthesis="raytracing",\n    image_width=[2160],\n    image_height=[1440],\n    fps=60,\n)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"camera_index"})," \u2192 select the camera index used to render the environment ",(0,i.jsx)(n.code,{children:"[-1]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image_synthesis"})," \u2192 select the type of rendering is used ",(0,i.jsx)(n.code,{children:"raytracing"}),", ",(0,i.jsx)(n.code,{children:"segmentation_instance"}),", ",(0,i.jsx)(n.code,{children:"segmentation_class"}),", ",(0,i.jsx)(n.code,{children:"optical_flow"}),", ",(0,i.jsx)(n.code,{children:"depth"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image_width"})," \u2192 select the width resolution in term of pixel size ",(0,i.jsx)(n.code,{children:"[int]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image_height"})," \u2192 select the height resolution in term of pixel size ",(0,i.jsx)(n.code,{children:"[int]"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image_height"})," \u2192 select the frames per second target during rendering",(0,i.jsx)(n.code,{children:"[int]"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"observe-the-environment-as-a-json-graph",children:"Observe the Environment as a JSON Graph"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes rendering the environment is not needed, especially when using the environment to train a agent that does not require visual inference. If you are only interested in observing the environment programatically as a JSON graph, you can run the ",(0,i.jsx)(n.code,{children:"observation"})," function:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import virtualcity\n\nenvironment.observation(\n    observation_type="full",\n    radius=[-1]\n)\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"observation_type"})," \u2192 select the type of observation ",(0,i.jsx)(n.code,{children:"partial"}),", ",(0,i.jsx)(n.code,{children:"full"}),", ",(0,i.jsx)(n.code,{children:"visual"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"radius"})," \u2192 select the radius of the observation that the graph contains ",(0,i.jsx)(n.code,{children:"[int]"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The graph contains all the ",(0,i.jsx)(n.code,{children:"objects"}),", ",(0,i.jsx)(n.code,{children:"agents"}),", ",(0,i.jsx)(n.code,{children:"cameras"})," within observation. Each object has a set of ",(0,i.jsx)(n.code,{children:"properties"})," such as:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," \u2192 the unique id given to the object as a way to identify within the environment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sm_name"})," \u2192 the object name that is assigned to it by the 3D engine"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sm_transform"})," \u2192 the coordinate, rotation, and scale of the of the object"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"relations"})," \u2192 the relation of the object with other objects within the environment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sockets"}),' \u2192 the amount of "containers" within the object']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"states"})," \u2192 the state of the object"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="graph.json"',children:'{\n  Apartment_0: [\n    {\n      "id": 1,\n      "sm_name": "SM_Football",\n      "sm_transform": [\n        "X=0.000 Y=0.000 Z=0.000",\n        "P=0.000000 Y=0.000000 R=0.000000",\n        "X=1.000 Y=1.000 Z=1.000"\n      ],\n      "relations": [\n        "Supported by floor"        \n      ],\n      "sockets": [\n        0\n      ],\n      "states": [\n        "None"\n      ]\n    }\n  ]\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);